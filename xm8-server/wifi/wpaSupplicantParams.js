var parameters = {

/*
// Always set to 1, not user selectable
scan_ssid:
`SSID scan technique; 0 (default) or 1. Technique 0 scans for the
SSID using a broadcast Probe Request frame while 1 uses a
directed Probe Request frame. Access points that cloak them-
selves by not broadcasting their SSID require technique 1, but
beware that this scheme can cause scanning to take longer to com-
plete.`,
*/
bssid: 
`Network BSSID (typically the MAC address of the access point).`,

/*
// Generated by order of known nets, not user selectable
priority:
`The priority of a network when selecting among multiple networks;
a higher value means a network is more desirable. By default
networks have priority 0. When multiple networks with the same
priority are considered for selection, other information such as
security policy and signal strength are used to select one.`,
*/

mode:
`IEEE 802.11 operation mode; either 0 (infrastructure, default) or
1 (IBSS). Note that IBSS (adhoc) mode can only be used with
key_mgmt set to NONE (plaintext and static WEP), or key_mgmt set
to WPA-NONE (fixed group key TKIP/CCMP). In addition, ap_scan
has to be set to 2 for IBSS. WPA-NONE requires proto set to WPA,
key_mgmt set to WPA-NONE, pairwise set to NONE, group set to
either CCMP or TKIP (but not both), and psk must also be set.`,

proto:
`List of acceptable protocols; one or more of: WPA (IEEE
802.11i/D3.0) and RSN (IEEE 802.11i). WPA2 is another name for
RSN. If not set this defaults to "WPA RSN".`,

key_mgmt:
`List of acceptable key management protocols; one or more of:
WPA-PSK (WPA pre-shared key), WPA-EAP (WPA using EAP authentica-
tion), IEEE8021X (IEEE 802.1x using EAP authentication and,
optionally, dynamically generated WEP keys), NONE (plaintext or
static WEP keys). If not set this defaults to "WPA-PSK WPA-EAP".`,

auth_alg:
`List of allowed IEEE 802.11 authentication algorithms; one or
more of: OPEN (Open System authentication, required for
WPA/WPA2), SHARED (Shared Key authentication), LEAP (LEAP/Network
EAP). If not set automatic selection is used (Open System with
LEAP enabled if LEAP is allowed as one of the EAP methods).`,

pairwise:
`List of acceptable pairwise (unicast) ciphers for WPA; one or
more of: CCMP (AES in Counter mode with CBC-MAC, RFC 3610, IEEE
802.11i/D7.0), TKIP (Temporal Key Integrity Protocol, IEEE
802.11i/D7.0), NONE (deprecated). If not set this defaults to
"CCMP TKIP".`,

group:
`List of acceptable group (multicast) ciphers for WPA; one or more
of: CCMP (AES in Counter mode with CBC-MAC, RFC 3610, IEEE
802.11i/D7.0), TKIP (Temporal Key Integrity Protocol, IEEE
802.11i/D7.0), WEP104 (WEP with 104-bit key), WEP40 (WEP with
40-bit key). If not set this defaults to "CCMP TKIP WEP104
WEP40".`,

psk:
`WPA preshared key used in WPA-PSK mode. The key is specified as
64 hex digits or as an 8-63 character ASCII passphrase. ASCII
passphrases are dynamically converted to a 256-bit key at runtime
using the network SSID, or they can be statically converted at
configuration time using the wpa_passphrase(8) utility.`,

eapol_flags:
`Dynamic WEP key usage for non-WPA mode, specified as a bit field.
Bit 0 (1) forces dynamically generated unicast WEP keys to be
used. Bit 1 (2) forces dynamically generated broadcast WEP keys
to be used. By default this is set to 3 (use both).`,

eap:
`List of acceptable EAP methods; one or more of: MD5 (EAP-MD5,
cannot be used with WPA, used only as a Phase 2 method with EAP-
PEAP or EAP-TTLS), MSCHAPV2 (EAP-MSCHAPV2, cannot be used with
WPA; used only as a Phase 2 method with EAP-PEAP or EAP-TTLS),
OTP (EAP-OTP, cannot be used with WPA; used only as a Phase 2
metod with EAP-PEAP or EAP-TTLS), GTC (EAP-GTC, cannot be used
with WPA; used only as a Phase 2 metod with EAP-PEAP or EAP-
TTLS), TLS (EAP-TLS, client and server certificate), PEAP (EAP-
PEAP, with tunneled EAP authentication), TTLS (EAP-TTLS, with
tunneled EAP or PAP/CHAP/MSCHAP/MSCHAPV2 authentication). If not
set this defaults to all available methods compiled in to
wpa_supplicant(8). Note that by default wpa_supplicant(8) is
compiled with EAP support; see make.conf(5) for the
NO_WPA_SUPPLICANT_EAPOL configuration variable that can be used
to disable EAP support.`,

identity:
`Identity string for EAP.`,

anonymous_identity:
`Anonymous identity string for EAP (to be used as the unencrypted
identity with EAP types that support different tunneled identi-
ties; e.g. EAP-TTLS).`,

mixed_cell:
`Configure whether networks that allow both plaintext and encryp-
tion are allowed when selecting a BSS from the scan results. By
default this is set to 0 (disabled).`,

password:
`Password string for EAP.`,

ca_cert:
`Pathname to CA certificate file. This file can have one or more
trusted CA certificates. If ca_cert is not included, server cer-
tificates will not be verified (not recommended).`,

client_cert:
`Pathname to client certificate file (PEM/DER).`,

private_key:
`
Pathname to a client private key file (PEM/DER/PFX). When a
PKCS#12/PFX file is used, then client_cert should not be speci-
fied as both the private key and certificate will be read from
PKCS#12 file.`,

private_key_passwd:
`Password for any private key file.`,

dh_file:
`Pathname to a file holding DH/DSA parameters (in PEM format).
This file holds parameters for an ephemeral DH key exchange. In
most cases, the default RSA authentication does not use this con-
figuration. However, it is possible to set up RSA to use an
ephemeral DH key exchange. In addition, ciphers with DSA keys
always use ephemeral DH keys. This can be used to achieve for-
ward secrecy. If the dh_file is in DSA parameters format, it
will be automatically converted into DH parameters.`,

subject_match:
`Substring to be matched against the subject of the authentication
server certificate. If this string is set, the server certifi-
cate is only accepted if it contains this string in the subject.
The subject string is in following format:

/C=US/ST=CA/L=San Francisco/CN=Test
AS/emailAddress=as@example.com`,

phase1:
`Phase1 (outer authentication, i.e., TLS tunnel) parameters
(string with field-value pairs, e.g., "peapver=0" or "peapver=1
peaplabel=1").

peapver can be used to force which PEAP version (0 or 1) is used.

peaplabel=1 can be used to force new label, 'iclient PEAP
encryption', to be used during key derivation when PEAPv1 or
newer. Most existing PEAPv1 implementations seem to be using the
old label, "client EAP encryption", and wpa_supplicant(8) is
now using that as the default value. Some servers, e.g.,
Radiator, may require peaplabel=1 configuration to interoperate
with PEAPv1; see eap_testing.txt for more details.

peap_outer_success=0 can be used to terminate PEAP authentication
on tunneled EAP-Success. This is required with some RADIUS
servers that implement draft-josefsson-pppext-eap-tls-eap-05.txt
(e.g., Lucent NavisRadius v4.4.0 with PEAP in IETF Draft 5''
mode).

include_tls_length=1 can be used to force wpa_supplicant(8) to
include TLS Message Length field in all TLS messages even if they
are not fragmented.

sim_min_num_chal=3 can be used to configure EAP-SIM to require
three challenges (by default, it accepts 2 or 3).

fast_provisioning=1 option enables in-line provisioning of EAP-
FAST credentials (PAC).`,

phase2:
`phase2: Phase2 (inner authentication with TLS tunnel) parameters
(string with field-value pairs, e.g., "auth=MSCHAPV2" for EAP-
PEAP or "autheap=MSCHAPV2 autheap=MD5" for EAP-TTLS).`,

ca_cert2:
`Like ca_cert but for EAP inner Phase 2.`,

client_cert2:
`Like client_cert but for EAP inner Phase 2.`,

private_key2:
`Like private_key but for EAP inner Phase 2.`,

private_key2_passwd:
`Like private_key_passwd but for EAP inner Phase 2.`,

dh_file2:
`Like dh_file but for EAP inner Phase 2.`,

subject_match2:
`Like subject_match but for EAP inner Phase 2.`,

eappsk:
`16-byte pre-shared key in hex format for use with EAP-PSK.`,

nai:
`User NAI for use with EAP-PSK.`,

server_nai:
`Authentication Server NAI for use with EAP-PSK.`,

pac_file:
`Pathname to the file to use for PAC entries with EAP-FAST. The
wpa_supplicant(8) utility must be able to create this file and
write updates to it when PAC is being provisioned or refreshed.`,

eap_workaround:
`Enable/disable EAP workarounds for various interoperability
issues with misbehaving authentication servers. By default these
workarounds are enabled. Strict EAP conformance can be config-
ured by setting this to 0.`,

wep_tx_keyidx:
`which key to use for transmission of packets.`,

wep_keyN:
`key: An ASCII string enclosed in quotation marks to encode the WEP
key. Without quotes this is a hex string of the actual key. WEP
is considered insecure and should be avoided. The exact transla-
tion from an ASCII key to a hex key varies. Use hex keys where
possible.`
};

module.exports.parameters = parameters;
